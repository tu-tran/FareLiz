using System.IO;
using System.Net;
using System.Text.RegularExpressions;
using SkyDean.FareLiz.Core;
using SkyDean.FareLiz.Core.Data;
using SkyDean.FareLiz.Core.Utils;

namespace SkyDean.FareLiz.InterFlight
{
    public partial class PTFareDataProvider
    {
        private readonly PTDataGenerator _generator = new PTDataGenerator();
        private static readonly byte[] Seed = new byte[] { 0x95, 0x64, 0x01, 0x38, 0x46, 0x64, 0x78, 0x77 };
        private static readonly byte[] RootBase = new byte[] { 0x37, 0x62, 0x38, 0x32, 0x64, 0x36, 0x63, 0x64, 0x30, 0x30, 0x31, 0x37, 0x38, 0x38, 0x36, 0x63, 0x33, 0x32, 0x66, 0x33, 0x33, 0x39, 0x37, 0x37, 0x35, 0x31, 0x31, 0x61, 0x64, 0x38, 0x63, 0x35, 0x33, 0x35, 0x66, 0x37, 0x33, 0x39, 0x37, 0x35, 0x30, 0x61, 0x34, 0x33, 0x39, 0x32, 0x64, 0x39, 0x37, 0x34, 0x65, 0x31, 0x32, 0x34, 0x30, 0x37, 0x36, 0x62, 0x33, 0x35, 0x66, 0x37, 0x62, 0x35 };
        private static readonly byte[] RequestBase = new byte[] { 0x37, 0x62, 0x38, 0x32, 0x64, 0x36, 0x63, 0x64, 0x30, 0x30, 0x31, 0x37, 0x38, 0x38, 0x36, 0x63, 0x33, 0x32, 0x66, 0x33, 0x33, 0x39, 0x37, 0x37, 0x35, 0x31, 0x31, 0x61, 0x64, 0x38, 0x63, 0x35, 0x33, 0x35, 0x66, 0x37, 0x33, 0x39, 0x37, 0x35, 0x30, 0x61, 0x34, 0x33, 0x39, 0x32, 0x64, 0x39, 0x37, 0x34, 0x65, 0x31, 0x32, 0x34, 0x32, 0x38, 0x30, 0x32, 0x35, 0x62, 0x39, 0x33, 0x64, 0x30, 0x32, 0x32, 0x61, 0x39, 0x33, 0x64, 0x36, 0x66, 0x31, 0x62, 0x30, 0x61, 0x38, 0x34, 0x64, 0x36, 0x36, 0x37, 0x38, 0x37, 0x34, 0x64, 0x30, 0x37, 0x36, 0x62, 0x33, 0x35, 0x66, 0x37, 0x62, 0x35 };
        private static readonly byte[] DomainBase = new byte[] { 0x37, 0x62, 0x38, 0x32, 0x64, 0x36, 0x63, 0x64, 0x30, 0x30, 0x31, 0x37, 0x38, 0x38, 0x36, 0x63, 0x32, 0x61, 0x65, 0x38, 0x33, 0x64, 0x37, 0x33, 0x31, 0x39, 0x35, 0x34, 0x38, 0x31, 0x64, 0x30, 0x33, 0x36, 0x61, 0x39, 0x32, 0x62, 0x36, 0x65, 0x36, 0x62, 0x33, 0x35, 0x66, 0x37, 0x62, 0x35 };
        private static readonly byte[] CookieBase = new byte[] { 0x37, 0x62, 0x38, 0x32, 0x64, 0x36, 0x63, 0x64, 0x30, 0x30, 0x31, 0x37, 0x38, 0x38, 0x36, 0x63, 0x30, 0x61, 0x65, 0x38, 0x33, 0x64, 0x37, 0x33, 0x31, 0x39, 0x35, 0x34, 0x38, 0x31, 0x64, 0x30, 0x33, 0x36, 0x38, 0x37, 0x34, 0x64, 0x30, 0x37, 0x36, 0x62, 0x33, 0x35, 0x66, 0x37, 0x62, 0x35 };
        private static readonly byte[] ResultBase = new byte[] { 0x31, 0x31, 0x37, 0x33, 0x62, 0x31, 0x39, 0x30, 0x63, 0x31, 0x36, 0x66, 0x38, 0x31, 0x39, 0x65, 0x34, 0x35, 0x61, 0x62, 0x37, 0x62, 0x38, 0x33, 0x32, 0x33, 0x66, 0x32, 0x33, 0x65, 0x34, 0x66, 0x34, 0x32, 0x61, 0x66, 0x37, 0x62, 0x38, 0x31, 0x37, 0x38, 0x61, 0x62, 0x37, 0x34, 0x35, 0x33, 0x30, 0x33, 0x62, 0x39, 0x36, 0x36, 0x64, 0x63, 0x36, 0x62, 0x62, 0x38, 0x36, 0x32, 0x34, 0x61, 0x34, 0x31, 0x61, 0x62, 0x37, 0x63, 0x61, 0x63, 0x32, 0x39, 0x65, 0x63, 0x34, 0x65, 0x35, 0x39, 0x34, 0x31, 0x62, 0x36, 0x36, 0x38, 0x39, 0x62, 0x36, 0x64, 0x61, 0x65, 0x33, 0x66, 0x34, 0x66, 0x34, 0x35, 0x61, 0x66, 0x33, 0x30, 0x66, 0x33, 0x31, 0x39, 0x64, 0x64, 0x31, 0x31, 0x33, 0x66 };
        private static readonly byte[] ResultReferalBase = new byte[] { 0x31, 0x31, 0x37, 0x33, 0x62, 0x31, 0x39, 0x30, 0x63, 0x31, 0x36, 0x66, 0x38, 0x31, 0x39, 0x65, 0x34, 0x35, 0x61, 0x62, 0x37, 0x62, 0x38, 0x33, 0x32, 0x33, 0x66, 0x32, 0x33, 0x65, 0x34, 0x66, 0x34, 0x32, 0x61, 0x66, 0x37, 0x62, 0x38, 0x31, 0x37, 0x38, 0x61, 0x62, 0x37, 0x34, 0x35, 0x33, 0x30, 0x33, 0x62, 0x39, 0x36, 0x36, 0x64, 0x63, 0x36, 0x62, 0x62, 0x38, 0x36, 0x32, 0x34, 0x61, 0x34, 0x31, 0x61, 0x62, 0x37, 0x63, 0x61, 0x63, 0x36, 0x65, 0x62, 0x63, 0x37, 0x38, 0x34, 0x62, 0x30, 0x33, 0x61, 0x66, 0x36, 0x37, 0x38, 0x33, 0x32, 0x36, 0x66, 0x62, 0x36, 0x32, 0x35, 0x61, 0x34, 0x63, 0x61, 0x64, 0x36, 0x63, 0x39, 0x62, 0x34, 0x36, 0x61, 0x39, 0x36, 0x38, 0x34, 0x66, 0x34, 0x38, 0x65, 0x32, 0x33, 0x66, 0x63, 0x32, 0x34, 0x36, 0x62, 0x62, 0x37, 0x64, 0x35, 0x36, 0x34, 0x61, 0x62, 0x37, 0x37, 0x62, 0x38, 0x30, 0x31, 0x39, 0x64, 0x64, 0x31, 0x31, 0x33, 0x66 };

        private readonly DataGrep _dataGrep;
        private readonly string _root_, _request_, _domain_, _cookie_, _result_, _resultReferal_;

        public PTFareDataProvider()
        {
            _dataGrep = new DataGrep(Seed);
            _root_ = _dataGrep.Convert(RootBase);
            _request_ = _dataGrep.Convert(RequestBase);
            _domain_ = _dataGrep.Convert(DomainBase);
            _cookie_ = _dataGrep.Convert(CookieBase);
            _result_ = _dataGrep.Convert(ResultBase);
            _resultReferal_ = _dataGrep.Convert(ResultReferalBase);
        }

        public DataRequestResult QueryData(FlightFareRequest request, JourneyProgressChangedEventHandler progressChangedHandler)
        {
            byte[] postData = _generator.GeneratePOSTData(request);

            var httpRequest = (HttpWebRequest)WebRequest.Create(_request_ + "1");
            httpRequest.Method = "POST";
            httpRequest.CookieContainer = new CookieContainer();
            httpRequest.Accept = PTDataGenerator.ACCEPT;
            httpRequest.Referer = _root_;
            httpRequest.UserAgent = PTDataGenerator.USER_AGENT;
            httpRequest.ContentType = "application/x-www-form-urlencoded";
            httpRequest.ContentLength = postData.Length;

            Stream stream = httpRequest.GetRequestStream();
            stream.Write(postData, 0, postData.Length);
            stream.Close();

            string tokenId = null;

            using (var response = (HttpWebResponse)httpRequest.GetResponse())
            {
                string waitUri = response.ResponseUri.ToString();
                response.Close();

                var match = Regex.Match(waitUri, @"\?" + _cookie_ + @"\=(?<id>.+?)\&", RegexOptions.IgnoreCase);
                if (match.Success)
                    tokenId = match.Groups["id"].Value;
                else
                {
                    var cookies = response.Cookies;
                    foreach (Cookie c in cookies)
                    {
                        if (c.Name == _cookie_)
                        {
                            tokenId = c.Value;
                            break;
                        }
                    }
                }
            }

            DataRequestResult requestResult;
            do
            {
                requestResult = GetResult(tokenId);
            }
            while (requestResult.RequestState == DataRequestState.Pending || requestResult.RequestState == DataRequestState.Requested);

            return requestResult;
        }

        private DataRequestResult GetResult(string requestToken)
        {
            TravelRoute result = null;

            var request = (HttpWebRequest)WebRequest.Create(_result_);
            request.Method = "GET";
            request.Accept = PTDataGenerator.ACCEPT;
            request.CookieContainer = new CookieContainer();
            var cookie = new Cookie(_cookie_, requestToken) { Domain = _domain_ };
            request.CookieContainer.Add(cookie);
            request.Referer = _resultReferal_;
            request.UserAgent = PTDataGenerator.USER_AGENT;

            using (var response = (HttpWebResponse)request.GetResponse())
            {
                using (var dataStream = response.GetResponseStream())
                {
                    if (dataStream != null)
                    {
                        var parser = GetParser();
                        var dataResult = parser.ParseWebArchive(dataStream);
                        if (dataResult.ResultState == DataResult.NotReady)
                            return new DataRequestResult(DataRequestState.Pending, dataResult.ResultRoute);    // Data is not yet ready, return the current RequestState

                        result = dataResult.ResultRoute;
                        dataStream.Close();
                    }
                }
            }

            var newState = (result == null ? DataRequestState.Failed
                                   : (result.Journeys.Count < 1 || result.Journeys[0].Data.Count < 1 ? DataRequestState.NoData : DataRequestState.Ok));
            return new DataRequestResult(newState, result);
        }
    }
}
